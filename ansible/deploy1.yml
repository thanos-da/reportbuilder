---
- name: Create AWS user with auto-generated Jenkins key
  hosts: all  # Targets your AWS servers
  become: true
  vars:
    new_username: "deployer"
    jenkins_key_path: "/var/lib/jenkins/.ssh/id_ansible_{{ new_username }}"
    sudoers_file: "/etc/sudoers.d/90-{{ new_username }}"

  tasks:
    ### Part 1: Generate SSH key locally (Jenkins server is localhost) ###
    - name: Ensure Jenkins .ssh directory exists
      file:
        path: "/var/lib/jenkins/.ssh"
        state: directory
        mode: 0700
        owner: jenkins
        group: jenkins
      tags: keygen

    - name: Check if SSH key exists locally
      stat:
        path: "{{ jenkins_key_path }}"
      register: jenkins_key_stat
      tags: keygen

    - name: Generate SSH key pair locally
      community.crypto.openssh_keypair:
        path: "{{ jenkins_key_path }}"
        type: rsa
        size: 4096
        state: present
        owner: jenkins
        group: jenkins
        mode: '0600'
      when: not jenkins_key_stat.stat.exists
      tags: keygen

    - name: Read public key locally
      slurp:
        src: "{{ jenkins_key_path }}.pub"
      register: jenkins_pubkey
      tags: keygen

    - name: Decode public key
      set_fact:
        jenkins_public_key: "{{ jenkins_pubkey.content | b64decode }}"
      tags: keygen

    ### Part 2: Configure AWS server ###
    - name: Create new user
      user:
        name: "{{ new_username }}"
        shell: /bin/bash
        groups: sudo
        append: yes
        create_home: yes
        home: "/home/{{ new_username }}"
        password_lock: yes

    - name: Create .ssh directory for new user
      file:
        path: "/home/{{ new_username }}/.ssh"
        state: directory
        mode: 0700
        owner: "{{ new_username }}"
        group: "{{ new_username }}"

    - name: Add Jenkins public key to authorized_keys
      copy:
        content: "{{ jenkins_public_key }}"
        dest: "/home/{{ new_username }}/.ssh/authorized_keys"
        owner: "{{ new_username }}"
        group: "{{ new_username }}"
        mode: 0600

    - name: Configure sudo access without password
      copy:
        content: "{{ new_username }} ALL=(ALL) NOPASSWD:ALL\n"
        dest: "{{ sudoers_file }}"
        mode: 0440
        validate: 'visudo -cf %s'

    - name: Disable password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify: restart sshd

    - name: Configure SSH allowed users
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^AllowUsers"
        line: "AllowUsers {{ new_username }} ubuntu"
        state: present
      notify: restart sshd

    - name: Ensure SSH config has correct permissions
      file:
        path: /etc/ssh/sshd_config
        mode: 0600
        owner: root
        group: root

  handlers:
    - name: restart sshd
      service:
        name: sshd
        state: restarted
